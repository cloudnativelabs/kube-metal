networkd:
  units:
    - name: 00-unmanaged.network
      contents: |
        [Match]
        Name=dummy0 kube-dummy-if kube-bridge cni*

        [Link]
        Unmanaged=true
systemd:
  units:
    - name: etcd-member.service
      enable: ${enable_etcd_service}
      dropins:
        - name: 40-etcd-cluster.conf
          contents: |
            [Unit]
            ConditionHost=controller-01*
            [Service]
            Environment="ETCD_IMAGE_TAG=v3.2.7"
            Environment="ETCD_NAME=%H"
            Environment="ETCD_ADVERTISE_CLIENT_URLS=https://%H:2379"
            Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=https://%H:2380"
            Environment="ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379"
            Environment="ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380"
            Environment="ETCD_INITIAL_CLUSTER=%H=https://%H:2380"
            Environment="ETCD_STRICT_RECONFIG_CHECK=true"
            Environment="ETCD_SSL_DIR=/etc/ssl/etcd"
            Environment="ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt"
            Environment="ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt"
            Environment="ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key"
            Environment="ETCD_CLIENT_CERT_AUTH=true"
            Environment="ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt"
            Environment="ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt"
            Environment="ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key"
            Environment="ETCD_PEER_CLIENT_CERT_AUTH=true"
    - name: resolved-setup.service
      enable: true
      contents: |
        [Unit]
        Description=systemd-resolved custom configuration
        Before=systemd-resolved.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/usr/bin/mkdir -p /etc/systemd/resolved.conf.d
        ExecStart=/usr/bin/ln -sf /dev/null /etc/systemd/resolved.conf.d/50-no-dns-listener.conf
        ExecStart=/usr/bin/ln -sf /usr/lib/systemd/resolv.conf /etc/resolv.conf

        [Install]
        WantedBy=systemd-resolved.service
    - name: locksmithd.service
      mask: true
    - name: wait-for-dns.service
      enable: false
      contents: |
        [Unit]
        Description=Wait for DNS entries
        Wants=systemd-resolved.service
        Before=kubelet.service
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf > /dev/null; do sleep 1; done'
        [Install]
        RequiredBy=kubelet.service
    - name: kubelet.path
      enable: true
      contents: |
        [Unit]
        Description=Watch for kubeconfig
        [Path]
        PathExists=/etc/kubeconfig
        [Install]
        WantedBy=multi-user.target
    - name: kubelet.service
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        [Service]
        EnvironmentFile=/etc/kubelet.env
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
          --dns=host \
          --hosts-entry=host \
          --volume var-lib-cni,kind=host,source=/var/lib/cni \
          --mount volume=var-lib-cni,target=/var/lib/cni \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log"
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/cni/net.d
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/checkpoint-secrets
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/inactive-manifests
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
        ExecStartPre=/usr/bin/bash -c "grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d > /etc/kubernetes/ca.crt"
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --node-labels=${node_labels} \
          --kubeconfig=/etc/kubernetes/kubeconfig \
          --require-kubeconfig \
          --client-ca-file=/etc/kubernetes/ca.crt \
          --anonymous-auth=false \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --network-plugin=cni \
          --lock-file=/var/run/lock/kubelet.lock \
          --exit-on-lock-contention \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --allow-privileged \
          --hostname-override=${node_name} \
          --cluster_dns=10.3.0.10 \
          --cluster_domain=cluster.local
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
    - name: bootkube.service
      contents: |
        [Unit]
        Description=Bootstrap a Kubernetes control plane with a temp api-server
        ConditionPathExists=!/opt/bootkube/init_bootkube.done
        [Service]
        Type=oneshot
        RemainAfterExit=true
        WorkingDirectory=/opt/bootkube
        ExecStart=/opt/bootkube/bootkube-start
        ExecStartPost=/bin/touch /opt/bootkube/init_bootkube.done
    - name: DATA.mount
      enable: true
      contents: |
        [Unit]
        ConditionPathIsSymbolicLink=/dev/disk/by-label/DATA

        [Mount]
        What=/dev/disk/by-label/DATA
        Where=/DATA
        Type=btrfs
        Options=compress=lzo,subvol=/

        [Install]
        WantedBy=local-fs.target
    - name: DATA.automount
      enable: true
      contents: |
        [Automount]
        Where=/DATA

        [Install]
        WantedBy=local-fs.target
    - name: btrfs-create-subvolumes.service
      enable: true
      contents: |
        [Unit]
        Description=Initial BTRFS subvolume creation
        RequiresMountsFor=/DATA
        ConditionDirectoryNotEmpty=!/DATA

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/usr/sbin/btrfs subvolume create /DATA/docker
        ExecStart=/usr/sbin/btrfs subvolume create /DATA/rkt
        ExecStart=/usr/sbin/btrfs subvolume create /DATA/etcd
        ExecStart=/usr/sbin/btrfs subvolume create /DATA/kubernetes
        ExecStart=/usr/sbin/btrfs subvolume create /DATA/core
        ExecStart=/usr/sbin/btrfs subvolume create /DATA/kubelet
        ExecStart=/usr/sbin/btrfs subvolume create /DATA/ssl-etcd
        ExecStart=/usr/bin/chown -R core:core /DATA/core

        [Install]
        WantedBy=multi-user.target
    - name: var-lib-docker.mount
      enable: true
      contents: |
        [Unit]
        Before=docker.service

        [Mount]
        What=/dev/disk/by-label/DATA
        Where=/var/lib/docker
        Type=btrfs
        Options=compress=lzo,subvol=/docker
    - name: var-lib-docker.automount
      enable: true
      contents: |
        [Unit]
        Requires=DATA.mount
        Wants=btrfs-create-subvolumes.service
        After=DATA.mount
        After=btrfs-create-subvolumes.service
        Before=docker.service

        [Automount]
        Where=/var/lib/docker

        [Install]
        WantedBy=docker.service
        WantedBy=local-fs.target
    - name: var-lib-rkt.mount
      enable: true
      contents: |
        [Unit]
        Before=rkt-gc.service rkt-metadata.service

        [Mount]
        What=/dev/disk/by-label/DATA
        Where=/var/lib/rkt
        Type=btrfs
        Options=compress=lzo,subvol=/rkt
    - name: var-lib-rkt.automount
      enable: true
      contents: |
        [Unit]
        Requires=DATA.mount
        Wants=btrfs-create-subvolumes.service
        After=DATA.mount
        After=btrfs-create-subvolumes.service
        Before=rkt-gc.service rkt-metadata.service

        [Automount]
        Where=/var/lib/rkt

        [Install]
        WantedBy=rkt-gc.service rkt-metadata.service
        WantedBy=local-fs.target
    - name: var-lib-kubelet.mount
      enable: true
      contents: |
        [Unit]
        Before=kubelet.service

        [Mount]
        What=/dev/disk/by-label/DATA
        Where=/var/lib/kubelet
        Type=btrfs
        Options=compress=lzo,subvol=/kubelet
    - name: var-lib-kubelet.automount
      enable: true
      contents: |
        [Unit]
        Requires=DATA.mount
        Wants=btrfs-create-subvolumes.service
        After=DATA.mount
        After=btrfs-create-subvolumes.service
        Before=kubelet.service

        [Automount]
        Where=/var/lib/kubelet

        [Install]
        WantedBy=local-fs.target
        WantedBy=kubelet.service
    - name: var-etcd.mount
      enable: true
      contents: |
        [Unit]
        Before=kubelet.service

        [Mount]
        What=/dev/disk/by-label/DATA
        Where=/var/etcd
        Type=btrfs
        Options=compress=lzo,subvol=/etcd
    - name: var-etcd.automount
      enable: true
      contents: |
        [Unit]
        Wants=btrfs-create-subvolumes.service
        After=DATA.mount
        After=btrfs-create-subvolumes.service
        Before=kubelet.service

        [Automount]
        Where=/var/etcd

        [Install]
        WantedBy=local-fs.target
        WantedBy=kubelet.service
    - name: etc-kubernetes.mount
      enable: true
      contents: |
        [Unit]
        Before=kubelet.service bootkube.service

        [Mount]
        What=/dev/disk/by-label/DATA
        Where=/etc/kubernetes
        Type=btrfs
        Options=compress=lzo,subvol=/kubernetes
    - name: etc-kubernetes.automount
      enable: true
      contents: |
        [Unit]
        Wants=btrfs-create-subvolumes.service
        After=DATA.mount
        After=btrfs-create-subvolumes.service
        Before=kubelet.service bootkube.service

        [Automount]
        Where=/etc/kubernetes

        [Install]
        WantedBy=local-fs.target
        WantedBy=kubelet.service bootkube.service
    - name: etc-ssl-etcd.mount
      enable: true
      contents: |
        [Unit]
        Before=kubelet.service bootkube.service

        [Mount]
        What=/dev/disk/by-label/DATA
        Where=/etc/ssl/etcd
        Type=btrfs
        Options=compress=lzo,subvol=/ssl-etcd
    - name: etc-ssl-etcd.automount
      enable: true
      contents: |
        [Unit]
        Wants=btrfs-create-subvolumes.service
        After=DATA.mount
        After=btrfs-create-subvolumes.service
        Before=kubelet.service bootkube.service

        [Automount]
        Where=/etc/ssl/etcd

        [Install]
        WantedBy=local-fs.target
        WantedBy=kubelet.service bootkube.service
    - name: home-core.mount
      enable: true
      contents: |
        [Unit]
        Before=coreos-metadata-sshkeys@core.service

        [Mount]
        What=/dev/disk/by-label/DATA
        Where=/home/core
        Type=btrfs
        Options=compress=lzo,subvol=/core
    - name: home-core.automount
      enable: true
      contents: |
        [Unit]
        Wants=btrfs-create-subvolumes.service
        After=DATA.mount
        After=btrfs-create-subvolumes.service
        Before=coreos-metadata-sshkeys@core.service

        [Automount]
        Where=/home/core

        [Install]
        WantedBy=local-fs.target
        WantedBy=coreos-metadata-sshkeys@core.service
storage:
  disks:
    # - device: /dev/sda
    #   wipe_table: false
    #   partitions:
    #     # /var - 75GB
    #     - number: 1
    #       label: var
    #       # size: 158118750
    #       size: 75GB
    #       start: 0
    #     # /home - 25GB
    #     - number: 2
    #       label: home
    #       # size: 52706250
    #       size: 25GB
    #       start: 0
    #     # /etc - rest
    #     - number: 3
    #       label: etc
    #       size: 0
    #       start: 0
  filesystems:
    - name: data
      mount:
        device: /dev/sda
        format: btrfs
        create:
          force: false
          options:
            - -L
            - DATA
    # - name: var
    #   mount:
    #     # device: /dev/sda1
    #     device: /dev/disk/by-partlabel/var
    #     format: btrfs
    #     create:
    #       force: false
    #       options:
    #         - -L
    #         - VAR
    # - name: home
    #   mount:
    #     # device: /dev/sda2
    #     device: /dev/disk/by-partlabel/home
    #     format: btrfs
    #     create:
    #       force: false
    #       options:
    #         - -L
    #         - HOME
    # - name: etc
    #   mount
    #     # device: /dev/sda3
    #     device: /dev/disk/by-partlabel/etc
    #     format: btrfs
    #     create:
    #       force: false
    #       options:
    #         - -L
    #         - ETC
  files:
    - path: /etc/kubelet.env
      filesystem: root
      mode: 0644
      contents:
        inline: |
          KUBELET_IMAGE_URL=quay.io/coreos/hyperkube
          KUBELET_IMAGE_TAG=v${kubernetes_v_patch}_coreos.0
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline:
          ${node_name}
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      contents:
        inline: |
          fs.inotify.max_user_watches=16184
    - path: /opt/bin/symlink-persistent-dirs.sh
      filesystem: root
      mode: 0544
      contents:
        inline: |
          #!/usr/bin/env sh
          set -xe

          MOVE_DIR="/moved"
          DATA_DIR="/DATA"

          [ -n "$${PERSIST_DIRS}" ] || ( \
              echo "Error: No PERSIST_DIRS provided"
              exit 1)

          mkdir -p "$${MOVE_DIR}"

          for dir in $${PERSIST_DIRS}; do
              DIR_NAME="$$(basename "$${dir}")"
              DEST_DIR="$${MOVE_DIR}/$${DIR_NAME}"

              if [ -d "$${dir}" ] && [ ! -L "$${dir}" ]
              then
                  if [ -d "$${DEST_DIR}" ]
                  then
                      cp -an "$${dir}"/* "$${DEST_DIR}"
                  else
                      mv "$${dir}" "$${DEST_DIR}"
                  fi
              else
                  if [ -L "$${dir}" ]
                  then
                      continue
                  else
                      ln -s "$${DATA_DIR}/$${DIR_NAME}" "$${dir}"
                  fi
              fi
          done
    - path: /opt/bootkube/bootkube-start
      filesystem: root
      mode: 0544
      user:
        id: 500
      group:
        id: 500
      contents:
        inline: |
          #!/bin/bash
          # Wrapper for bootkube start
          set -e
          # Move experimental manifests
          [ -d /opt/bootkube/assets/manifests-* ] && mv /opt/bootkube/assets/manifests-*/* /opt/bootkube/assets/manifests && rm -rf /opt/bootkube/assets/manifests-*
          [ -d /opt/bootkube/assets/experimental/manifests ] && mv /opt/bootkube/assets/experimental/manifests/* /opt/bootkube/assets/manifests && rm -r /opt/bootkube/assets/experimental/manifests
          [ -d /opt/bootkube/assets/experimental/bootstrap-manifests ] && mv /opt/bootkube/assets/experimental/bootstrap-manifests/* /opt/bootkube/assets/bootstrap-manifests && rm -r /opt/bootkube/assets/experimental/bootstrap-manifests
          BOOTKUBE_ACI="$${BOOTKUBE_ACI:-quay.io/coreos/bootkube}"
          BOOTKUBE_VERSION="$${BOOTKUBE_VERSION:-v0.6.2}"
          BOOTKUBE_ASSETS="$${BOOTKUBE_ASSETS:-/opt/bootkube/assets}"
          exec /usr/bin/rkt run \
            --trust-keys-from-https \
            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \
            --mount volume=assets,target=/assets \
            --volume bootstrap,kind=host,source=/etc/kubernetes \
            --mount volume=bootstrap,target=/etc/kubernetes \
            $RKT_OPTS \
            $${BOOTKUBE_ACI}:$${BOOTKUBE_VERSION} \
            --net=host \
            --dns=host \
            --exec=/bootkube -- start --asset-dir=/assets "$@"
    - path: /etc/systemd/timesyncd.conf
      filesystem: root
      mode: 0620
      contents:
        inline: |
          [Time]
          NTP=0.coreos.pool.ntp.org 1.coreos.pool.ntp.org 2.coreos.pool.ntp.org 3.coreos.pool.ntp.org
